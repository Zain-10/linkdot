// Copilot write unit tests for nextjs api routes with mocked response
//
// Learn more about testing: https://nextjs.org/docs/testing

// import { userService } from "@/helpers/service/users";
import type { NextApiRequest, NextApiResponse } from "next";

import handler from "@/pages/api/users/[id]";
// import { mocked } from "ts-jest/utils";

describe("GET /api/users/:id", () => {
  it("should return a user", async () => {
    const expectedUser = {
      id: 1,
      name: "John Doe",
      email: "doe@gmail.com",
    };

    // Mock the return value of the getUserFromDB function
    // jest.mock("@/backend/db/service/user", () => () => user);
    // const user = require("@/backend/db/service/user");

    // jest.spyOn(user, "getUserFromDB").mockResolvedValue(expectedUser);

    // jest.mock("@/backend/db/service/user", () => ({
    //   getUserFromDB: jest.fn().mockImplementation(() => {
    //     return expectedUser;
    //   }),
    // }));

    // Why is this not working?
    // jest.mock("@/backend/db/service/user", () => ({
    //   getUserFromDB: jest.fn().mockResolvedValue(expectedUser),
    // }));

    // const user = require("@/backend/db/service/user");
    // const getUserFromDB = jest.spyOn(user, "getUserFromDB");
    // getUserFromDB.mockResolvedValue(expectedUser);

    jest.mock("@/backend/db/service/user", () => ({
      getTime: () => "1:11PM",
      getUserFromDB: () => expectedUser,
    }));

    const req = {
      query: {
        id: "1",
      },
    } as unknown as NextApiRequest;
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn().mockReturnThis(),
    } as unknown as NextApiResponse;

    // mocked(userService.getUser).mockResolvedValue(user);

    await handler(req, res);

    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.json).toHaveBeenCalledWith(expectedUser);
  });
});

// The test above is generated by Copilot. It is a unit test for the API route /api/users/:id . It uses Jest to mock the response of the getUser function. The test is pretty straightforward and easy to understand.
